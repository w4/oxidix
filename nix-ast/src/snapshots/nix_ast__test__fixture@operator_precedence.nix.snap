---
source: nix-ast/src/lib.rs
expression: "{a, c, d, e, f, g, i, j, k, l }: a.b c - -d ++ e * f + g // i && j -> k |> l\n"
input_file: nix-ast/fixtures/operator_precedence.nix
---
Lambda(
    LambdaExpression {
        parameters: Set(
            LambdaParametersSet {
                inner: {
                    "a": LambdaParameter {
                        default: None,
                    },
                    "c": LambdaParameter {
                        default: None,
                    },
                    "d": LambdaParameter {
                        default: None,
                    },
                    "e": LambdaParameter {
                        default: None,
                    },
                    "f": LambdaParameter {
                        default: None,
                    },
                    "g": LambdaParameter {
                        default: None,
                    },
                    "i": LambdaParameter {
                        default: None,
                    },
                    "j": LambdaParameter {
                        default: None,
                    },
                    "k": LambdaParameter {
                        default: None,
                    },
                    "l": LambdaParameter {
                        default: None,
                    },
                },
                extra_ignored: false,
                bound: None,
            },
        ),
        body: Binary(
            BinaryExpression {
                operator: LeftAssocPipeOperator,
                left: Binary(
                    BinaryExpression {
                        operator: LogicalImplication,
                        left: Binary(
                            BinaryExpression {
                                operator: LogicalAnd,
                                left: Binary(
                                    BinaryExpression {
                                        operator: Update,
                                        left: Binary(
                                            BinaryExpression {
                                                operator: Addition,
                                                left: Binary(
                                                    BinaryExpression {
                                                        operator: Subtraction,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                operator: FunctionApplication,
                                                                left: Binary(
                                                                    BinaryExpression {
                                                                        operator: AttributeSelection,
                                                                        left: Ident(
                                                                            "a",
                                                                        ),
                                                                        right: Ident(
                                                                            "b",
                                                                        ),
                                                                        postfix: None,
                                                                    },
                                                                ),
                                                                right: Ident(
                                                                    "c",
                                                                ),
                                                                postfix: None,
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                operator: Multiplication,
                                                                left: Binary(
                                                                    BinaryExpression {
                                                                        operator: ListConcatenation,
                                                                        left: Unary(
                                                                            UnaryExpression {
                                                                                operator: ArithmeticNegation,
                                                                                expression: Ident(
                                                                                    "d",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        right: Ident(
                                                                            "e",
                                                                        ),
                                                                        postfix: None,
                                                                    },
                                                                ),
                                                                right: Ident(
                                                                    "f",
                                                                ),
                                                                postfix: None,
                                                            },
                                                        ),
                                                        postfix: None,
                                                    },
                                                ),
                                                right: Ident(
                                                    "g",
                                                ),
                                                postfix: None,
                                            },
                                        ),
                                        right: Ident(
                                            "i",
                                        ),
                                        postfix: None,
                                    },
                                ),
                                right: Ident(
                                    "j",
                                ),
                                postfix: None,
                            },
                        ),
                        right: Ident(
                            "k",
                        ),
                        postfix: None,
                    },
                ),
                right: Ident(
                    "l",
                ),
                postfix: None,
            },
        ),
    },
)
